# GenLite - Cursor Rules

## Project Overview
This is a Flutter app called GenLite - an offline AI assistant that uses the Gemma language model. The project follows Clean Architecture principles with BLoC pattern for state management.

## Architecture & Structure

### Directory Structure
- `lib/core/` - App constants, themes, utilities
- `lib/features/` - Feature modules (chat, files, settings, onboarding)
- `lib/shared/` - Shared services and widgets
- `test/` - Mirrors the lib structure for tests

### BLoC Pattern
- Separate events and states into individual files: `*_event.dart`, `*_state.dart`
- Main bloc file imports from these separate files
- Use `bloc_test` package for testing BLoCs
- Always include proper error handling in event handlers

### File Naming Conventions
- Use snake_case for file names: `onboarding_bloc.dart`, `file_processing_service.dart`
- Use PascalCase for class names: `OnboardingBloc`, `FileProcessingService`
- Use camelCase for variables and methods: `onComplete`, `extractTextFromFile`

## Code Style & Patterns

### Imports
- Group imports: Flutter/Dart packages first, then project imports
- **ALWAYS use absolute imports starting with "package:" for project files**
- Import specific files rather than entire directories
- **NEVER use relative imports (../ or ./) for project files**

### Import Examples
```dart
// ✅ CORRECT - Use absolute imports
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:genlite/core/constants/app_constants.dart';
import 'package:genlite/features/chat/bloc/chat_bloc.dart';
import 'package:genlite/shared/services/chat_service.dart';

// ❌ INCORRECT - Don't use relative imports
import '../constants/app_constants.dart';
import '../../features/chat/bloc/chat_bloc.dart';
import './chat_service.dart';
```

### Widget Structure
- Use `const` constructors when possible
- Prefer `StatelessWidget` over `StatefulWidget` unless state is needed
- Use `AppCard`, `PrimaryButton`, `SecondaryButton` from shared widgets
- Follow Material 3 design principles

### Widget Extraction Pattern
- Extract widgets to separate files when they exceed 50 lines or have complex logic
- Organize by feature: `lib/features/{feature}/widgets/`
- Keep main screen files focused on screen logic and state management
- Use descriptive widget names: `ChatWelcomeMessage`, `VoiceStatusIndicator`
- Follow feature prefix: `Chat*`, `File*`, `Settings*`
- One widget per file, use snake_case for file names
- Handle import conflicts with `hide` or `as` keywords

#### Widget Extraction Guidelines:
```dart
// Extract when:
// - Widget is 50+ lines
// - Widget has complex logic  
// - Widget could be reused elsewhere
// - Main screen file is 300+ lines

// File structure:
lib/features/chat/
├── presentation/
│   └── chat_screen.dart          # Clean and focused
└── widgets/                      # Extracted widgets
    ├── chat_welcome_message.dart
    ├── chat_error_message.dart
    ├── chat_message_list.dart
    ├── chat_input_bar.dart
    └── voice_status_indicator.dart
```

### Services
- Use static methods for utility services
- Include proper error handling with try-catch blocks
- Return meaningful error messages
- Use async/await for asynchronous operations

## Avoiding Deprecated APIs

### Flutter Deprecated Methods
- **NEVER use deprecated Flutter APIs or methods**
- Avoid `withOpacity()` - use `Color.fromRGBO()` or `Color.fromARGB()` instead
- Avoid `RaisedButton` - use `ElevatedButton` instead
- Avoid `FlatButton` - use `TextButton` instead
- Avoid `OutlineButton` - use `OutlinedButton` instead
- Avoid `Scaffold.of(context)` - use `ScaffoldMessenger.of(context)` for snackbars
- Avoid `Theme.of(context).primaryColor` - use `Theme.of(context).colorScheme.primary` instead

### Deprecated API Examples
```dart
// ❌ DEPRECATED - Don't use
color.withOpacity(0.5)
RaisedButton(onPressed: () {}, child: Text('Button'))
FlatButton(onPressed: () {}, child: Text('Button'))
Scaffold.of(context).showSnackBar(SnackBar(content: Text('Message')))

// ✅ CORRECT - Use these instead
Color.fromRGBO(255, 255, 255, 0.5)
Color.fromARGB(128, 255, 255, 255)
ElevatedButton(onPressed: () {}, child: Text('Button'))
TextButton(onPressed: () {}, child: Text('Button'))
ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Message')))
```

### Checking for Deprecation
- Run `flutter analyze` regularly to catch deprecated usage
- Check Flutter documentation for API changes
- Use IDE warnings to identify deprecated methods
- Update code when Flutter version is upgraded
- Test thoroughly after replacing deprecated APIs

### Migration Guidelines
- Replace deprecated methods immediately when found
- Test functionality after migration
- Update related tests to use new APIs
- Document any breaking changes in migration
- Consider backward compatibility when possible

## Logging & Debugging

### Logging Strategy
- Use structured logging with consistent format
- Include context information in log messages
- Use appropriate log levels (debug, info, warning, error)
- Log at method entry/exit for complex operations
- Include relevant data for debugging

### Logging Patterns
```dart
// Service logging
class ChatService {
  static const String _tag = '[ChatService]';
  
  Future<void> sendMessage(String message) async {
    print('$_tag Sending message: "${message.substring(0, min(50, message.length))}..."');
    
    try {
      // Business logic
      print('$_tag Message sent successfully');
    } catch (e) {
      print('$_tag Error sending message: $e');
      rethrow;
    }
  }
}

// BLoC logging
class ChatBloc extends Bloc<ChatEvent, ChatState> {
  static const String _tag = '[ChatBloc]';
  
  Future<void> _onSendMessage(SendMessage event, Emitter<ChatState> emit) async {
    print('$_tag Starting to process message: "${event.message}"');
    
    try {
      // Business logic
      print('$_tag Message processed successfully');
    } catch (e) {
      print('$_tag Error processing message: $e');
      print('$_tag Emitting error state...');
      emit(ChatError(e.toString()));
    }
  }
}
```

### Debug Information
- Log method parameters and return values for complex operations
- Include stack traces for errors when appropriate
- Log state transitions in BLoCs
- Track performance metrics for slow operations
- Use conditional logging based on build mode

### Debug Helpers
```dart
// Debug utility
class DebugUtils {
  static bool get isDebugMode => kDebugMode;
  
  static void log(String tag, String message, {Object? data}) {
    if (isDebugMode) {
      final timestamp = DateTime.now().toIso8601String();
      final dataStr = data != null ? ' | Data: $data' : '';
      print('$timestamp $tag $message$dataStr');
    }
  }
  
  static void logMethod(String className, String methodName, {Map<String, dynamic>? params}) {
    if (isDebugMode) {
      final paramStr = params != null ? ' | Params: $params' : '';
      print('[$className] Entering $methodName$paramStr');
    }
  }
}
```

### Error Tracking
- Log all exceptions with context
- Include user actions that led to errors
- Track error frequency and patterns
- Provide user-friendly error messages
- Implement error reporting for critical failures

## Testing Best Practices

### Test Structure & Organization
- Mirror the `lib/` structure in `test/`
- Group related tests using `group()`
- Use descriptive test names that explain expected behavior
- Follow AAA pattern: Arrange, Act, Assert
- Keep tests focused and single-purpose

### Test Naming Conventions
```dart
// Good test names
test('should emit ChatLoaded when message is sent successfully', () {});
test('should handle network errors gracefully', () {});
test('should validate user input before processing', () {});

// Avoid vague names
test('test1', () {});
test('works', () {});
test('does something', () {});
```

### BLoC Testing Patterns
```dart
// Basic BLoC test structure
blocTest<ChatBloc, ChatState>(
  'should emit [ChatLoading, ChatLoaded] when SendMessage succeeds',
  build: () => ChatBloc(),
  act: (bloc) => bloc.add(const SendMessage('Hello')),
  expect: () => [
    const ChatLoading(),
    isA<ChatLoaded>(),
  ],
);

// Testing error scenarios
blocTest<ChatBloc, ChatState>(
  'should emit ChatError when SendMessage fails',
  build: () => ChatBloc(),
  act: (bloc) => bloc.add(const SendMessage('')),
  expect: () => [
    isA<ChatError>(),
  ],
);

// Testing with seed state
blocTest<ChatBloc, ChatState>(
  'should update existing conversation',
  build: () => ChatBloc(),
  seed: () => const ChatLoaded(conversations: [existingConversation]),
  act: (bloc) => bloc.add(const SendMessage('New message')),
  expect: () => [
    isA<ChatLoaded>(),
  ],
);
```

### Widget Testing Patterns
```dart
// Basic widget test
testWidgets('should render chat input field', (WidgetTester tester) async {
  await tester.pumpWidget(
    TestConfig.createTestApp(
      const ChatInputField(),
    ),
  );
  
  expect(find.byType(TextField), findsOneWidget);
  expect(find.byType(ElevatedButton), findsOneWidget);
});

// Testing user interactions
testWidgets('should send message when button is pressed', (WidgetTester tester) async {
  await tester.pumpWidget(
    TestConfig.createTestApp(
      const ChatInputField(),
    ),
  );
  
  await tester.enterText(find.byType(TextField), 'Hello AI');
  await tester.tap(find.byType(ElevatedButton));
  await tester.pump();
  
  // Verify expected behavior
});

// Testing loading states
testWidgets('should show loading indicator when processing', (WidgetTester tester) async {
  await tester.pumpWidget(
    TestConfig.createTestApp(
      const ChatScreen(),
    ),
  );
  
  await tester.tap(find.byType(ElevatedButton));
  await tester.pump();
  
  expect(find.byType(CircularProgressIndicator), findsOneWidget);
});
```

### Service Testing Patterns
```dart
// Mocking external dependencies
@GenerateMocks([StorageService, PathProvider])
void main() {
  group('FileProcessingService', () {
    late MockStorageService mockStorageService;
    late MockPathProvider mockPathProvider;
    
    setUp(() {
      mockStorageService = MockStorageService();
      mockPathProvider = MockPathProvider();
    });
    
    test('should process text file successfully', () async {
      // Arrange
      when(mockPathProvider.getTemporaryPath())
          .thenAnswer((_) async => '/tmp');
      
      // Act
      final result = await FileProcessingService.processFile(file);
      
      // Assert
      expect(result, isNotNull);
      expect(result.text, contains('expected content'));
    });
  });
}
```

### Integration Testing
```dart
// End-to-end user workflows
testWidgets('complete chat conversation flow', (WidgetTester tester) async {
  await tester.pumpWidget(
    TestConfig.createTestApp(
      const ChatScreen(),
    ),
  );
  
  // Create new conversation
  await tester.tap(find.byKey(const Key('new_chat_button')));
  await tester.pump();
  
  // Send message
  await tester.enterText(find.byType(TextField), 'Hello AI');
  await tester.tap(find.byType(ElevatedButton));
  await tester.pump();
  
  // Verify AI response
  expect(find.textContaining('AI response'), findsOneWidget);
});
```

### Test Data Management
```dart
// Test data factories
class TestData {
  static ChatMessage createTestMessage({
    String? content,
    MessageRole role = MessageRole.user,
    DateTime? timestamp,
  }) {
    return ChatMessage(
      id: 'test-${DateTime.now().millisecondsSinceEpoch}',
      content: content ?? 'Test message',
      role: role,
      timestamp: timestamp ?? DateTime.now(),
    );
  }
  
  static Conversation createTestConversation({
    String? title,
    List<ChatMessage>? messages,
  }) {
    return Conversation(
      id: 'test-conversation-${DateTime.now().millisecondsSinceEpoch}',
      title: title ?? 'Test Conversation',
      messages: messages ?? [createTestMessage()],
      createdAt: DateTime.now(),
    );
  }
}
```

### Performance Testing
```dart
// Testing performance-critical operations
test('should process large file within reasonable time', () async {
  final stopwatch = Stopwatch()..start();
  
  await FileProcessingService.processLargeFile(largeFile);
  
  stopwatch.stop();
  expect(stopwatch.elapsedMilliseconds, lessThan(5000)); // 5 seconds max
});
```

### Coverage Requirements
- **MANDATORY: Maintain 80%+ test coverage at all times**
- Run `flutter test --coverage` before committing
- Focus on critical business logic and user-facing functionality
- Test both success and error scenarios
- Include edge cases and boundary conditions
- Test async operations and error handling

### Test Maintenance
- Update tests when changing implementation
- Remove obsolete tests
- Refactor tests to improve readability
- Use test helpers to reduce duplication
- Keep tests fast and reliable

## Specific Patterns

### Storage Service Usage
```dart
// Save settings
await StorageService.saveSetting('key', value);

// Get settings with default
final value = await StorageService.getSetting<bool>('key') ?? false;
```

### BLoC Event Handling
```dart
Future<void> _onEventName(
  EventName event,
  Emitter<StateType> emit,
) async {
  try {
    // Business logic
    emit(NewState());
  } catch (e) {
    emit(ErrorState(e.toString()));
  }
}
```

### Widget Testing
```dart
testWidgets('should render correctly', (WidgetTester tester) async {
  await tester.pumpWidget(
    TestConfig.createTestApp(
      const WidgetUnderTest(),
    ),
  );
  
  expect(find.byType(ExpectedWidget), findsOneWidget);
});
```

### File Processing
- Support TXT, PDF, DOCX files
- Use mock implementations for PDF/DOCX in tests
- Clean extracted text by removing excessive whitespace
- Handle file size formatting with human-readable units

### UI Components
- Use `AppConstants` for consistent spacing, colors, and sizes
- Implement loading states with `LoadingIndicator` and `LoadingOverlay`
- Use `AppCard` for content containers
- Follow the established color scheme and typography

## Error Handling
- Always wrap async operations in try-catch blocks
- Provide meaningful error messages
- Use proper error states in BLoCs
- Handle network errors gracefully
- Implement retry mechanisms where appropriate

## Performance Considerations
- Use `const` constructors for immutable widgets
- Implement proper loading states
- Handle large file uploads efficiently
- Use appropriate data structures for performance

## Privacy & Security
- All processing happens locally on device
- No data sent to external servers
- Use secure storage for sensitive data
- Implement proper token management for Hugging Face API

## Documentation
- Include comprehensive README with setup instructions
- Document API usage and examples
- Maintain clear commit messages
- Use meaningful variable and method names

## Dependencies
- Use latest stable Flutter version
- Prefer official Flutter packages
- Keep dependencies up to date
- Document any custom dependencies or workarounds

## Git Workflow
- Use descriptive commit messages
- Include issue numbers in commits when relevant
- Follow conventional commit format
- Keep commits focused and atomic

## Code Quality
- Follow Flutter/Dart style guide
- Use meaningful variable names
- Keep methods focused and single-purpose
- Add comments for complex logic
- Use proper error handling throughout

## When Adding New Features
1. Follow the established directory structure
2. Create separate event and state files for BLoCs
3. Add comprehensive tests with proper logging
4. Update documentation if needed
5. Follow the established naming conventions
6. Use shared UI components when possible
7. Implement proper error handling and logging
8. Consider privacy implications
9. Ensure test coverage meets 80%+ requirement

## Common Patterns to Follow
- Use `TestConfig.createTestApp()` for widget tests
- Mock `PathProvider` for file system operations
- Use `StorageService` for persistent data
- Implement proper loading states for async operations
- Use `AppConstants` for consistent styling
- Follow the established error handling patterns
- Add comprehensive logging for debugging
- Write tests for all new functionality 